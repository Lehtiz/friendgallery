package projekti.model;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonManagedReference;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.ElementCollection;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.NamedAttributeNode;
import javax.persistence.NamedEntityGraph;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
//import javax.validation.constraints.Email;
import javax.validation.constraints.NotEmpty;
import javax.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import org.springframework.data.jpa.domain.AbstractPersistable;






// lombok constructor / getset helpers
@NoArgsConstructor 
@Entity
@NamedEntityGraph(
    name = "accountWithFriends",
        attributeNodes = {
            @NamedAttributeNode("friends")
        }
)
public class Account extends AbstractPersistable<Long> {
    
    // id is autogenerated let spring handle it even if netbeans shouts about it
        @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
	@Getter
	private Long id;
    
    @Column(name="username", unique=true)
    @NotEmpty
    @Size(min = 2, max = 50)
    @Getter @Setter
    private String username;
    
    //@NotEmpty
    //@Email
    //private String email;
    
    @NotEmpty
    @Size(min = 2, max = 50)
    @Getter @Setter
    private String firstname;
    
    @NotEmpty
    @Size(min = 2, max = 50)
    @Getter @Setter
    private String lastname;
    
    @NotEmpty
    @Getter @Setter
    private String password;
    
    // accounts authorities
    @ElementCollection(fetch = FetchType.EAGER)
    @Getter @Setter
    private List<String> authorities;
    
    // picture album:
    // one user has one picture album
    @OneToOne(cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    @JoinColumn(name = "album_id", referencedColumnName = "id")
    @Getter @Setter
    @JsonIgnoreProperties
    private Album album;
    
    // wall that has comments
    @OneToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "wall_id", referencedColumnName = "id")
    @Getter @Setter
    private Wall wall;
    
    // avatar, one pic from saved images
    @ManyToOne(fetch = FetchType.LAZY)
    @Getter @Setter
    private Picture avatar;
    
    // list of ongoing requests
    // user can send many requests
    @OneToMany(mappedBy = "sender")
    @Getter @Setter
    private List<FriendRequest> friendRequests = new ArrayList<>();

    // Friends and friendsof joined as account_friends
    
    @JoinTable(name = "account_friends",
			joinColumns = @JoinColumn(name = "account_id"),
			inverseJoinColumns = @JoinColumn(name = "friend_id"))
    @ManyToMany(fetch = FetchType.LAZY)
    @Getter @Setter
    private Set<Account> friends = new HashSet<>();
    
    
    @JoinTable(name = "account_friends",
                    joinColumns = @JoinColumn(name = "friend_id"),
                    inverseJoinColumns = @JoinColumn(name = "account_id"))
    @ManyToMany(fetch = FetchType.LAZY)
    @Getter @Setter
    private Set<Account> friendOf = new HashSet<>();
    
    
    
    //////
    public boolean hasFriend(Account friend) {
        return friends.contains(friend);
    }

    public void addFriend(Account friend) {
        friends.add(friend);
        //friend.friendOf.add(this); // adds 3rd param to sql query, also not needed anymore join table handles relations
    }

    public void removeFriend(Account friend) {
        friends.remove(friend);
        friend.friendOf.remove(this);
    }

    public boolean isFriendOf(Account person) {
        return friendOf.contains(person);
    }
}
